<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">

<h:head>
    <title>Основная страница</title>
    <link rel="stylesheet" type="text/css" href="static/css/style_1lab.css"/>
</h:head>

<h:body onload="drawGraphOnLoad()">
    <div class="top-bar">
        <h1><a>podshapkoy</a></h1>
    </div>

    <div class="container">
        <h1>Форма для проверки попадания точек в область</h1>
        <div class="button-container">
            <h:form styleClass="button_submit">
                <p:commandButton styleClass="button_submit" value="Вернуться назад"
                                 action="#{navigationBean.redirectToStartPage}"/>
            </h:form>
        </div>
        <h:form id="data-form" prependId="false">
            <div class="coordinate_img">
                <canvas id="coordinateCanvas" width="400" height="400"/>
            </div>
            <div class="form">
                <div class="block_R">
                    <p:outputLabel for="inputR" value="R:"/>
                    <p:inputText id="inputR" value="#{bean.r}" required="true" label="R"/>
                </div>
                <div class="block_X">
                    <p:outputLabel for="inputX" value="X:"/>
                    <p:slider styleClass="ui-slider" id="inputX" for="inputX" value="#{bean.x}" minValue="-4" maxValue="4" step="0.1">
                        <p:ajax event="slideEnd" update="displayX" />
                    </p:slider>
                    <h:outputText id="displayX" value="#{bean.x}">
                        <f:convertNumber pattern="#0.0" />
                    </h:outputText>
                </div>

                <div class="block_Y">
                    <p:outputLabel for="inputY" value="Y:"/>
                    <p:inputText id="inputY" value="#{bean.y}" required="true" label="Y"/>
                </div>
                <p:commandButton styleClass="button_submit" value="Проверить попадание" action="#{bean.submitForm}" />
            </div>
        </h:form>

        <div class="result-table">
            <p:dataTable id="result-row" var="result" value="#{bean.resultTable}">
                <p:column headerText="X" styleClass="result-column">
                    <h:outputText value="#{result.x}"/>
                </p:column>
                <p:column headerText="Y" styleClass="result-column">
                    <h:outputText value="#{result.y}"/>
                </p:column>
                <p:column headerText="R" styleClass="result-column">
                    <h:outputText value="#{result.r}"/>
                </p:column>
                <p:column headerText="Result" styleClass="result-column">
                    <h:outputText value="#{result.inside ? 'Попадание' : 'Промах'}"/>
                </p:column>
                <p:column headerText="Time" styleClass="result-column">
                    <h:outputText value="#{result.localDateTime}"/>
                </p:column>
            </p:dataTable>
        </div>
    </div>
</h:body>
<script type="text/javascript">
    //КАНВА ХАЙ-ПО-ВА-Я
    var canvas = document.getElementById('coordinateCanvas');
    var ctx = canvas.getContext('2d');
    function drawGraphOnLoad() {
        drawGraph();
    }
    function drawGraph(){
        var centerX = canvas.width / 2;
        var centerY = canvas.height / 2;
        var arrowSize = 8;
        var axisMargin = 20;
        var canvasWidth = canvas.width;
        var canvasHeight = canvas.height;

        ctx.fillStyle = 'rgba(255,255,255,0.2)';
        ctx.fillRect(0, 0, canvasWidth, canvasHeight);

        // Ось X
        ctx.beginPath();
        ctx.moveTo(axisMargin, centerY);
        ctx.lineTo(canvas.width - axisMargin, centerY);
        ctx.strokeStyle = 'black';
        ctx.stroke();

        // Стрелочка для оси X
        ctx.beginPath();
        ctx.moveTo(canvas.width - axisMargin - arrowSize, centerY - arrowSize);
        ctx.lineTo(canvas.width - axisMargin, centerY);
        ctx.lineTo(canvas.width - axisMargin - arrowSize, centerY + arrowSize);
        ctx.fillStyle = 'black';
        ctx.fill();

        // Подпись к оси X
        ctx.fillStyle = 'black';
        ctx.font = '14px Arial';
        ctx.fillText('X', canvas.width - axisMargin + 4, centerY + 20);

        // Ось Y
        ctx.beginPath();
        ctx.moveTo(centerX, axisMargin);
        ctx.lineTo(centerX, canvas.height - axisMargin);
        ctx.strokeStyle = 'black';
        ctx.stroke();

        // Стрелочка для оси Y
        ctx.beginPath();
        ctx.moveTo(centerX - arrowSize, axisMargin + arrowSize);
        ctx.lineTo(centerX, axisMargin);
        ctx.lineTo(centerX + arrowSize, axisMargin + arrowSize);
        ctx.fillStyle = 'black';
        ctx.fill();

        // Подпись к оси Y
        ctx.fillStyle = 'black';
        ctx.font = '14px Arial';
        ctx.fillText('Y', centerX - 20, axisMargin - 4);

        // Отрисовка фигур
        var rectWidth = canvas.width;
        var rectHeight = canvas.width / 2;

        var scale = canvas.width / (2.5 * canvas.width);

        // Координаты прямоугольника
        var rectX1 = centerX;
        var rectY1 = centerY;
        var rectX2 = centerX;
        var rectY2 = centerY + rectHeight * scale;
        var rectX3 = centerX - rectWidth * scale;
        var rectY3 = centerY + rectHeight * scale;
        var rectX4 = centerX - rectWidth * scale;
        var rectY4 = centerY;

        ctx.beginPath();
        ctx.moveTo(rectX1, rectY1);
        ctx.lineTo(rectX2, rectY2);
        ctx.lineTo(rectX3, rectY3);
        ctx.lineTo(rectX4, rectY4);
        ctx.closePath();
        ctx.fillStyle = 'rgba(230,0,255,0.2)';
        ctx.fill();

        // Координаты треугольника
        var trianX1 = centerX;
        var trianY1 = centerY;
        var trianX2 = centerX + (rectWidth) * scale;
        var trianY2 = centerY;
        var trianX3 = centerX;
        var trianY3 = centerY - (rectWidth) * scale;
        ctx.beginPath();
        ctx.moveTo(trianX1, trianY1);
        ctx.lineTo(trianX2, trianY2);
        ctx.lineTo(trianX3, trianY3);
        ctx.closePath();
        ctx.fillStyle = 'rgba(230,0,255,0.2)';
        ctx.fill();

        // Координаты вершин четверти окружности
        ctx.beginPath();
        ctx.arc(centerX, centerY, rectWidth * scale, Math.PI / 2, 0, true);
        ctx.lineTo(centerX, centerY);
        ctx.closePath();
        ctx.fillStyle = 'rgba(230,0,255,0.2)';
        ctx.fill();
        drawCoordinateAxes();
    }

    // Отрисовка координатных осей
    function drawCoordinateAxes() {
        var centerX = canvas.width / 2;
        var centerY = canvas.height / 2;
        var arrowSize = 8;
        var axisMargin = 20;


        // Засечки и надписи на оси X
        var selectedR = parseFloat(document.getElementById("input_R").value);
        var stepX = (canvas.width - 2 * axisMargin - 5 * arrowSize) / (2 * selectedR);
        ctx.fillStyle = 'rgb(18,66,103)';

        var labelsX = [];
        for (var i = -selectedR; i &lt;= selectedR; i += selectedR / 2) {
            labelsX.push(i);
        }

        for (i = 0; i &lt; labelsX.length; i++) {
            var xPos = centerX + labelsX[i] * stepX;
            ctx.beginPath();
            ctx.moveTo(xPos, centerY - 5);
            ctx.lineTo(xPos, centerY + 5);
            ctx.strokeStyle = 'black';
            ctx.stroke();
            ctx.fillText(labelsX[i], xPos - 10, centerY + 20);
        }

        // Засечки и надписи на оси Y
        var stepY = (canvas.height - 2 * axisMargin - 5 * arrowSize) / (2 * selectedR);
        var labelsY = [];
        for (i = -selectedR; i &lt;= selectedR; i += selectedR / 2) {
            labelsY.push(i);
        }
        ctx.fillStyle = 'rgb(18,66,103)';

        for (i = 0; i &lt; labelsY.length; i++) {
            var yPos = centerY - labelsY[i] * stepY;
            ctx.beginPath();
            ctx.moveTo(centerX - 5, yPos);
            ctx.lineTo(centerX + 5, yPos);
            ctx.strokeStyle = 'black';
            ctx.stroke();
            ctx.fillText(labelsY[i], centerX + 10, yPos + 5);
        }
        // ОЧЕНЬ КРУТАЯ ТОЧКА
        var selectedX, selectedY;
        var inputXElement = document.getElementById("input_X");
        var inputYElement = document.getElementById("input_Y");

        if (inputXElement &amp;&amp; inputYElement) {
            selectedX = parseFloat(inputXElement.value);
            selectedY = parseFloat(inputYElement.value);
        }
        var scale = canvas.width / (2.5 * selectedR);

        var xCoordinate = centerX + selectedX * scale;
        var yCoordinate = centerY - selectedY * scale;
        ctx.beginPath();
        ctx.arc(xCoordinate, yCoordinate, 3, 0, 2 * Math.PI);
        ctx.fillStyle = 'rgb(230,0,255)';
        ctx.fill();
    }
</script>
</html>
